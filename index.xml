<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>wangyichen&#39;s blog</title>
    <link>https://yichenlove.github.io/</link>
    <description>Recent content on wangyichen&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>chen61813772@gmail.com (wangyichen)</managingEditor>
    <webMaster>chen61813772@gmail.com (wangyichen)</webMaster>
    <copyright>©2021, All Rights Reserved</copyright>
    <lastBuildDate>Fri, 03 Dec 2021 19:24:46 +0800</lastBuildDate>
    
        <atom:link href="https://yichenlove.github.io/index.xml" rel="self" type="application/rss+xml" />
    
      
      
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      

      
      <item>
        <title>Unity SRP URP HDRP 的区别</title>
        <link>https://yichenlove.github.io/posts/unity-urp-hdrp/</link>
        <pubDate>Fri, 03 Dec 2021 19:24:46 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Fri, 03 Dec 2021 19:24:46 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/unity-urp-hdrp/</guid>
        <description>1.Build-In Render 内置渲染器（默认）兼容太多，反而不能面面俱到，效果不好 2.Scriptable Render Pipline 可编程渲染管线技术，是Unity提供的新渲染系统，可用C#脚本定制Unity</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>unity</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Java中的难点知识</title>
        <link>https://yichenlove.github.io/posts/java-diff/</link>
        <pubDate>Thu, 02 Dec 2021 20:12:01 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Thu, 02 Dec 2021 20:12:01 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/java-diff/</guid>
        <description>1、简述一下JVM加载class文件的原理机制。 Java中的所有类，都需要由类加载器装载到JVM中才能运行。类加载器本身也是一个类，而它的工</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>java</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Unity的DraCall和Batch</title>
        <link>https://yichenlove.github.io/posts/unity-drawcall-batch/</link>
        <pubDate>Wed, 01 Dec 2021 20:33:28 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Wed, 01 Dec 2021 20:33:28 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/unity-drawcall-batch/</guid>
        <description>制作性能更高的UI DrawCall和Batch 抛去他复杂的定义，从字面意思上来理解，DrawCall,就是CPU准备好了数据呼叫GPU去绘制</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>unity</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>欧几里得算法</title>
        <link>https://yichenlove.github.io/posts/euclidean-algorithm/</link>
        <pubDate>Tue, 30 Nov 2021 14:28:41 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Tue, 30 Nov 2021 14:28:41 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/euclidean-algorithm/</guid>
        <description>欧几里德算法是用来求两个正整数最大公约数的算法。古希腊数学家欧几里德在其著作《The Elements》中最早描述了这种算法,所以被命名为欧几</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>algorithms</category>
            
          
        
        
          
            
              <category>math</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>递归的静态方法计算ln(N!)的值</title>
        <link>https://yichenlove.github.io/posts/ln-factorial/</link>
        <pubDate>Mon, 29 Nov 2021 15:04:06 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Mon, 29 Nov 2021 15:04:06 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/ln-factorial/</guid>
        <description>编写一个递归的静态方法计算ln(N!)的值。 代码 alo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class Main { public static double f(int N){ //递归的题目还是要靠递归的方式解决 //递归</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>algorithms</category>
            
          
        
        
          
            
              <category>math</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>深入理解 Java 反射和动态代理</title>
        <link>https://yichenlove.github.io/posts/java-reflection/</link>
        <pubDate>Fri, 26 Nov 2021 20:51:07 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Fri, 26 Nov 2021 20:51:07 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/java-reflection/</guid>
        <description># 1. 反射简介 # 1.1. 什么是反射 反射(Reflection)是 Java 程序开发语言的特征之一，它允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>java</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>App 64位和32位</title>
        <link>https://yichenlove.github.io/posts/app-32-64/</link>
        <pubDate>Thu, 25 Nov 2021 20:22:55 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Thu, 25 Nov 2021 20:22:55 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/app-32-64/</guid>
        <description>一、架构差异 ARM是RISC（精简指令集）处理器，不同于x86指令集（CISC,复杂指令集）。 ARM 有不同的CPU 架构 包括: ARMV8架构、AR</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>android</category>
            
          
            
              <category>ios</category>
            
          
            
              <category>arm</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>build.gradle配置参数</title>
        <link>https://yichenlove.github.io/posts/android-gardle/</link>
        <pubDate>Wed, 24 Nov 2021 22:05:15 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Wed, 24 Nov 2021 22:05:15 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/android-gardle/</guid>
        <description>Gradle是一个基于Apache Ant和Apache Maven概念的项目自动化建构工具。它使用一种基于Groovy的特定领域语言来声明项目</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>android</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Android 生命周期</title>
        <link>https://yichenlove.github.io/posts/android-lifecrcle/</link>
        <pubDate>Wed, 24 Nov 2021 15:43:51 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Wed, 24 Nov 2021 15:43:51 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/android-lifecrcle/</guid>
        <description>生命周期感知型组件可执行操作来响应另一个组件（如 Activity 和 Fragment）的生命周期状态的变化。这些组件有助于您编写出更有条理且往往更精简的代码</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>android</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>iOS 网络编程之 NSHTTPCookie/NSHTTPCookieStorage</title>
        <link>https://yichenlove.github.io/posts/ios-cookie/</link>
        <pubDate>Wed, 24 Nov 2021 10:34:02 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Wed, 24 Nov 2021 10:34:02 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/ios-cookie/</guid>
        <description>一、cookie 简介 由于HTTP协议的无状态，客户端经常使用cookie来提供跨URL请求的数据持久存储。URL加载系统提供了创建和管理co</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>ios</category>
            
          
            
              <category>cookie</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>滑动关闭Activity</title>
        <link>https://yichenlove.github.io/posts/android-activity2/</link>
        <pubDate>Tue, 23 Nov 2021 21:12:17 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Tue, 23 Nov 2021 21:12:17 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/android-activity2/</guid>
        <description>常常可以看到，很多Android应用都有这么一个功能，就是滑动关闭Activity，比如微信，CSDN移动端，百度贴吧移动端等。我自己也想写</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>android</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>深入理解 Typescript 高级用法</title>
        <link>https://yichenlove.github.io/posts/typescripts-high/</link>
        <pubDate>Mon, 22 Nov 2021 20:48:05 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Mon, 22 Nov 2021 20:48:05 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/typescripts-high/</guid>
        <description>❝**「前言」**：这里的标题看起来是 &amp;ldquo;高级用法&amp;rdquo;，不少同学可能就表示被劝退了。其实 Typescript 作为一门 强类型 编程语言，最具特</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>javascript</category>
            
          
            
              <category>typescript</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>AOT和JIT</title>
        <link>https://yichenlove.github.io/posts/aot-jit/</link>
        <pubDate>Fri, 19 Nov 2021 17:36:25 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Fri, 19 Nov 2021 17:36:25 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/aot-jit/</guid>
        <description>JIT，即Just-in-time,动态(即时)编译，边运行边编译；AOT，Ahead Of Time，指运行前编译，是两种程序的编译方式 区别 这两</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title>算法的时间与空间复杂度</title>
        <link>https://yichenlove.github.io/posts/algorithms-0/</link>
        <pubDate>Thu, 18 Nov 2021 17:23:40 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Thu, 18 Nov 2021 17:23:40 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/algorithms-0/</guid>
        <description>算法（Algorithm）是指用来操作数据、解决程序问题的一组方法。对于同一个问题，使用不同的算法，也许最终得到的结果是一样的，但在过程中消</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>algorithms</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>IC设计验证参考</title>
        <link>https://yichenlove.github.io/posts/ic-verification/</link>
        <pubDate>Wed, 17 Nov 2021 15:06:54 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Wed, 17 Nov 2021 15:06:54 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/ic-verification/</guid>
        <description>01 验证对于IC的重要性 IC是集成电路的缩写，也就是我们常说的芯片；IC行业的技术门槛高、投入资金大、回报周期长、失败风险高，做一款中等规模的</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>IC</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Java中char，int，String的相加减</title>
        <link>https://yichenlove.github.io/posts/java-char-add/</link>
        <pubDate>Tue, 16 Nov 2021 15:40:31 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Tue, 16 Nov 2021 15:40:31 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/java-char-add/</guid>
        <description>要点： char与int ：可以相加减；int取本身数值，char取对应的ASCII码值；得到的结果是ASCII码增大或减小了int对应的数值大</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>java</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>说说 Javascript 数字精度丢失的问题，如何解决？</title>
        <link>https://yichenlove.github.io/posts/javascripts-float/</link>
        <pubDate>Mon, 15 Nov 2021 20:02:11 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Mon, 15 Nov 2021 20:02:11 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/javascripts-float/</guid>
        <description># 一、场景复现 一个经典的面试题 1 0.1 + 0.2 === 0.3 // false 为什么是false呢? 先看下面这个比喻 比如一个数 1÷3=0.33333333&amp;hellip;&amp;</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>javascript</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>你安装的是Oracle JDK还是OpenJDK?</title>
        <link>https://yichenlove.github.io/posts/javajdk/</link>
        <pubDate>Mon, 15 Nov 2021 16:03:25 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Mon, 15 Nov 2021 16:03:25 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/javajdk/</guid>
        <description>你安装的是SUN/Oracle JDK还是OpenJDK? 还傻傻分不清楚吗? 快来看看这篇吧😁 目录 1 如何查看你安装的JDK版本 1.1 要用到的命令行工</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>java</category>
            
          
            
              <category>jdk</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>iTem2 &#43; oh-my-zsh 打造Mac上好用的终端</title>
        <link>https://yichenlove.github.io/posts/ohmyzsh/</link>
        <pubDate>Fri, 12 Nov 2021 17:58:54 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Fri, 12 Nov 2021 17:58:54 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/ohmyzsh/</guid>
        <description>效果图 安装iTem2 安装 1 2 3 $ brew tap caskroom/cask # 首次安装需执行该条命令 $ brew cask install iterm2 # 安装iterm2 打开iterm2，检查Report Terminal Type的设定</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title>Game Developer Roadmap</title>
        <link>https://yichenlove.github.io/posts/game-developer-roadmap/</link>
        <pubDate>Wed, 10 Nov 2021 14:18:32 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Wed, 10 Nov 2021 14:18:32 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/game-developer-roadmap/</guid>
        <description></description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title> XLua框架——lua协程实现</title>
        <link>https://yichenlove.github.io/posts/xluacoroutine/</link>
        <pubDate>Tue, 09 Nov 2021 15:47:27 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Tue, 09 Nov 2021 15:47:27 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/xluacoroutine/</guid>
        <description>协程在unity中是一个很常用的方法，我们可以利用协程使代码看起来更连贯，易于理解。xlua在示例6中提供了一个协程的示例。 1 2 3 4 5 6 7 8</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>unity</category>
            
          
            
              <category>xlua</category>
            
          
            
              <category>lua</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>详解 HTTP 协议</title>
        <link>https://yichenlove.github.io/posts/http/</link>
        <pubDate>Mon, 08 Nov 2021 17:45:53 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Mon, 08 Nov 2021 17:45:53 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/http/</guid>
        <description>详解 HTTP 协议 思维导图预览 一张图带你看完本篇文章 一、概述 1.计算机网络体系结构分层 计算机网络体系结构分层 2.TCP/IP 通信传输流 利用 TCP/IP 协议族进行网络通信时，</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>http</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>TCP/IP 协议</title>
        <link>https://yichenlove.github.io/posts/tcpip/</link>
        <pubDate>Mon, 08 Nov 2021 17:21:56 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Mon, 08 Nov 2021 17:21:56 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/tcpip/</guid>
        <description>熟悉 TCP/IP 协议 一张思维导图 一图看完本文 一、 计算机网络体系结构分层 计算机网络体系结构分层 计算机网络体系结构分层 不难看出，TCP/IP 与 OSI 在分层模块</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>TCP/IP</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>cocos creator glsl</title>
        <link>https://yichenlove.github.io/posts/crea_mf4/</link>
        <pubDate>Mon, 08 Nov 2021 17:18:21 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Mon, 08 Nov 2021 17:18:21 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/crea_mf4/</guid>
        <description>cocos creator 右键菜单，除了创建组件，effect material是什么？ 纹理： 关于Material: threejs是js基于webgl的一个3D图形</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>cocos creator</category>
            
          
            
              <category>glsl</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>cocos creator Material Effect梳理（三）</title>
        <link>https://yichenlove.github.io/posts/crea_mf3/</link>
        <pubDate>Mon, 08 Nov 2021 17:15:30 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Mon, 08 Nov 2021 17:15:30 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/crea_mf3/</guid>
        <description>已知问题跟进： cc_scenesize值没有初始化，所以始终是默认值[0,0] 给力的glsl编辑器： https://thebookofshaders.com/edit.php 一本通俗易懂的入门书: https://thebookofshaders.com/ 常用概念进阶 1.Noise</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>cocos creator</category>
            
          
            
              <category>Material Effect</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>cocos creator Material Effect梳理（⼆）</title>
        <link>https://yichenlove.github.io/posts/crea_mf2/</link>
        <pubDate>Mon, 08 Nov 2021 16:26:50 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Mon, 08 Nov 2021 16:26:50 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/crea_mf2/</guid>
        <description>cocos creator 应该先带⼀个glsl基础教程https://www.jianshu.com/p/43aaff0b6226（暂定后⾯这个放到前⾯充当梳理⼆</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>cocos creator</category>
            
          
            
              <category>Material Effect</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>cocos creator Material Effect梳理（⼀）</title>
        <link>https://yichenlove.github.io/posts/crea_mf/</link>
        <pubDate>Mon, 08 Nov 2021 15:39:14 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Mon, 08 Nov 2021 15:39:14 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/crea_mf/</guid>
        <description>cocos creator Material Effect梳理（⼀） cocos creator 右键菜单，除了创建组件，Effect Material是什么？ * 什么是Material(纹理)？: ``` three</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>cocos creator</category>
            
          
            
              <category>Material Effect</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Javascript中apply、call、bind</title>
        <link>https://yichenlove.github.io/posts/javascripts-bind/</link>
        <pubDate>Mon, 08 Nov 2021 11:03:43 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Mon, 08 Nov 2021 11:03:43 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/javascripts-bind/</guid>
        <description>apply、call 在 javascript 中，call 和 apply 都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 this 的指</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>javascript</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>【unity】使用Profiler进行性能分析</title>
        <link>https://yichenlove.github.io/posts/unity-profiler/</link>
        <pubDate>Mon, 08 Nov 2021 10:45:06 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Mon, 08 Nov 2021 10:45:06 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/unity-profiler/</guid>
        <description>在游戏开发过程中，游戏性能是非常重要的，学会使用unity自带的profiler工具是非常必要的，以下是我从官方地址找到的进阶教程，感觉文章</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>Unity</category>
            
          
            
              <category>Profiler</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Unity中xLua与toLua对Vector3的优化</title>
        <link>https://yichenlove.github.io/posts/unity-xlua-vector3/</link>
        <pubDate>Fri, 05 Nov 2021 17:55:54 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Fri, 05 Nov 2021 17:55:54 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/unity-xlua-vector3/</guid>
        <description>目录 概述 1.1 Vector3的定义 1.2 主要优化的是什么？ xLua对Vector3的优化 2.1 xLua创建Vector3 2.2 xLua获取Vector3 &amp;ndash; C</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>Unity</category>
            
          
            
              <category>xLua</category>
            
          
            
              <category>toLua</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Litjson Fix</title>
        <link>https://yichenlove.github.io/posts/litjson-fix/</link>
        <pubDate>Fri, 05 Nov 2021 17:25:44 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Fri, 05 Nov 2021 17:25:44 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/litjson-fix/</guid>
        <description>LitJson解析JSON字符串空{}出错 问题 1 2 3 4 5 6 7 string jsstr = &amp;#34;{\&amp;#34;key1\&amp;#34;:\&amp;#34;value1\&amp;#34;,\&amp;#34;key2\&amp;#34;:{},\&amp;#34;key3\&amp;#34;:\&amp;#34;value3\&amp;#34;}&amp;#34;; JsonData jsdata = JsonMapper.ToObject&amp;lt;JsonData&amp;gt;(jsstr); string outstr = JsonMapper.ToJson(jsddata); System.Console.WriteLine(&amp;#34;litjson json string:&amp;#34; + outstr); //输出litjson json string:{key</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>LitJson</category>
            
          
            
              <category>Unity</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Use Hugo</title>
        <link>https://yichenlove.github.io/posts/use-hugo/</link>
        <pubDate>Fri, 05 Nov 2021 17:07:31 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Fri, 05 Nov 2021 17:07:31 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/use-hugo/</guid>
        <description>Hugo 完整使用教程 官网 基于go 语言开发 官网地址：https://gohugo.io/ 环境 1.Homebrew 如果你是macOS用户，请使用Homebrew快速安装</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>hugo</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Android Activity的Launch Mode</title>
        <link>https://yichenlove.github.io/posts/android-launchmode/</link>
        <pubDate>Fri, 05 Nov 2021 16:54:48 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Fri, 05 Nov 2021 16:54:48 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/android-launchmode/</guid>
        <description>Android Activity的Launch Mode 综述 对安卓而言，Activity有四种启动模式，它们是： standard 标准模式，每次都新建一个实例对象 singleTop 如果在任务栈顶</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>android</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>My First Post</title>
        <link>https://yichenlove.github.io/posts/my-first-post/</link>
        <pubDate>Mon, 27 Sep 2021 15:03:48 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Mon, 27 Sep 2021 15:03:48 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/my-first-post/</guid>
        <description></description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
        
        
      </item>
      

    
  </channel>
</rss>
