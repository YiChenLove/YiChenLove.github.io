<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Unity on wangyichen&#39;s blog</title>
    <link>https://yichenlove.github.io/tags/unity/</link>
    <description>Recent content in Unity on wangyichen&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>chen61813772@gmail.com (wangyichen)</managingEditor>
    <webMaster>chen61813772@gmail.com (wangyichen)</webMaster>
    <copyright>©2024, All Rights Reserved</copyright>
    <lastBuildDate>Mon, 20 Mar 2023 17:06:20 +0800</lastBuildDate>
    
        <atom:link href="https://yichenlove.github.io/tags/unity/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Unity Shader入门（三）</title>
        <link>https://yichenlove.github.io/posts/unity-shader3/</link>
        <pubDate>Mon, 20 Mar 2023 17:06:20 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Mon, 20 Mar 2023 17:06:20 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/unity-shader3/</guid>
        <description>1.NPR基础概念 NPR 是 Non-Photorealistic Rendering 的简称，也就是图形渲染中的非真实感渲染，常见的 NPR 渲染包括卡通渲染、油画渲染、像素感渲染、素描画、水墨画等类型。 卡通</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>unity</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Unity Shader入门（二）</title>
        <link>https://yichenlove.github.io/posts/unity-shader2/</link>
        <pubDate>Sun, 29 Jan 2023 15:18:50 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Sun, 29 Jan 2023 15:18:50 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/unity-shader2/</guid>
        <description>1.渲染管线的相关概念 渲染管线是实时渲染的核心组件。渲染管线的功能是通过给定虚拟相机、3D场景物体以及光源等场景要素来产生或者渲染一副2D的</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>unity</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Unity Shader入门（一）</title>
        <link>https://yichenlove.github.io/posts/unity-shader1/</link>
        <pubDate>Sat, 28 Jan 2023 15:51:16 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Sat, 28 Jan 2023 15:51:16 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/unity-shader1/</guid>
        <description>1. Untiy 图形相关概念以及基础知识 Mesh / MeshFilter / MeshRenderer / Material 相关概念以及基础知识 在Unity 3D物体中包含了MeshFilter， MeshRenderer，M</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>unity</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Vector3类详解</title>
        <link>https://yichenlove.github.io/posts/unity-vector3-class/</link>
        <pubDate>Tue, 05 Jul 2022 14:52:12 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Tue, 05 Jul 2022 14:52:12 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/unity-vector3-class/</guid>
        <description>一、向量、点乘、叉乘的介绍 在数学中，几何向量（也称为欧几里得向量，通常简称向量、矢量），指具有大小（magnitude）和方向的量。 向量可以</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>Unity</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Unity Canvas 的三种渲染模式</title>
        <link>https://yichenlove.github.io/posts/unity-canvas-render-mode/</link>
        <pubDate>Mon, 27 Jun 2022 11:11:26 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Mon, 27 Jun 2022 11:11:26 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/unity-canvas-render-mode/</guid>
        <description>Canvas的三种渲染模式 Canvas共有三种渲染模式，分别是ScreenSpace-Overlay、ScreenSpace-Camera和</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>Unity</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>UnityEngine.Vector3 - Unity 脚本 API</title>
        <link>https://yichenlove.github.io/posts/unity-vector3/</link>
        <pubDate>Mon, 20 Jun 2022 21:14:13 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Mon, 20 Jun 2022 21:14:13 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/unity-vector3/</guid>
        <description>Vector3 struct in UnityEngine 切换到手册 描述 用于表示 3D 向量和点。 Unity 内部使用该结构传递 3D 位置和方向。 此外，它还包含用于执行常见向量操作的函数。 除了下面列出的函数以外</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>Unity</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>简单了解Mono和IL2CPP</title>
        <link>https://yichenlove.github.io/posts/monoandil2cpp/</link>
        <pubDate>Mon, 13 Dec 2021 21:31:47 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Mon, 13 Dec 2021 21:31:47 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/monoandil2cpp/</guid>
        <description>目录 .NET 应用程序是怎么运行的？ 跨平台需求 CIL，公共中间语言（Common Intermediate Language） CLR，公共语言运行时（Common Language Runti</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>unity</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Unity 内存优化</title>
        <link>https://yichenlove.github.io/posts/unity-cpu/</link>
        <pubDate>Thu, 09 Dec 2021 20:32:12 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Thu, 09 Dec 2021 20:32:12 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/unity-cpu/</guid>
        <description>性能分析 优化工作的第一个步骤便是通过性能分析来收集性能数据，这也是移动端优化的第一步。 我们要尽早在目标设备上进行性能分析，而且要经常分析。 Unity</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>unity</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Unity SRP URP HDRP 的区别</title>
        <link>https://yichenlove.github.io/posts/unity-urp-hdrp/</link>
        <pubDate>Fri, 03 Dec 2021 19:24:46 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Fri, 03 Dec 2021 19:24:46 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/unity-urp-hdrp/</guid>
        <description>1.Build-In Render 内置渲染器（默认）兼容太多，反而不能面面俱到，效果不好 2.Scriptable Render Pipline 可编程渲染管线技术，是Unity提供的新渲染系统，可用C#脚本定制Unity</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>unity</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Unity的DraCall和Batch</title>
        <link>https://yichenlove.github.io/posts/unity-drawcall-batch/</link>
        <pubDate>Wed, 01 Dec 2021 20:33:28 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Wed, 01 Dec 2021 20:33:28 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/unity-drawcall-batch/</guid>
        <description>制作性能更高的UI DrawCall和Batch 抛去他复杂的定义，从字面意思上来理解，DrawCall,就是CPU准备好了数据呼叫GPU去绘制</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>unity</category>
            
          
        
        
        
      </item>
      
      <item>
        <title> XLua框架——lua协程实现</title>
        <link>https://yichenlove.github.io/posts/xluacoroutine/</link>
        <pubDate>Tue, 09 Nov 2021 15:47:27 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Tue, 09 Nov 2021 15:47:27 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/xluacoroutine/</guid>
        <description>协程在unity中是一个很常用的方法，我们可以利用协程使代码看起来更连贯，易于理解。xlua在示例6中提供了一个协程的示例。 1 2 3 4 5 6 7 8</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>unity</category>
            
          
            
              <category>xlua</category>
            
          
            
              <category>lua</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>【unity】使用Profiler进行性能分析</title>
        <link>https://yichenlove.github.io/posts/unity-profiler/</link>
        <pubDate>Mon, 08 Nov 2021 10:45:06 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Mon, 08 Nov 2021 10:45:06 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/unity-profiler/</guid>
        <description>在游戏开发过程中，游戏性能是非常重要的，学会使用unity自带的profiler工具是非常必要的，以下是我从官方地址找到的进阶教程，感觉文章</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>Unity</category>
            
          
            
              <category>Profiler</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Unity中xLua与toLua对Vector3的优化</title>
        <link>https://yichenlove.github.io/posts/unity-xlua-vector3/</link>
        <pubDate>Fri, 05 Nov 2021 17:55:54 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Fri, 05 Nov 2021 17:55:54 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/unity-xlua-vector3/</guid>
        <description>目录 概述 1.1 Vector3的定义 1.2 主要优化的是什么？ xLua对Vector3的优化 2.1 xLua创建Vector3 2.2 xLua获取Vector3 &amp;ndash; C</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>Unity</category>
            
          
            
              <category>xLua</category>
            
          
            
              <category>toLua</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Litjson Fix</title>
        <link>https://yichenlove.github.io/posts/litjson-fix/</link>
        <pubDate>Fri, 05 Nov 2021 17:25:44 +0800</pubDate>
        <author>chen61813772@gmail.com (wangyichen)</author>
        <atom:modified>Fri, 05 Nov 2021 17:25:44 +0800</atom:modified>
        <guid>https://yichenlove.github.io/posts/litjson-fix/</guid>
        <description>LitJson解析JSON字符串空{}出错 问题 1 2 3 4 5 6 7 string jsstr = &amp;#34;{\&amp;#34;key1\&amp;#34;:\&amp;#34;value1\&amp;#34;,\&amp;#34;key2\&amp;#34;:{},\&amp;#34;key3\&amp;#34;:\&amp;#34;value3\&amp;#34;}&amp;#34;; JsonData jsdata = JsonMapper.ToObject&amp;lt;JsonData&amp;gt;(jsstr); string outstr = JsonMapper.ToJson(jsddata); System.Console.WriteLine(&amp;#34;litjson json string:&amp;#34; + outstr); //输出litjson json string:{key</description>
        
        <dc:creator>wangyichen</dc:creator>
        
        
        
        
          
            
              <category>LitJson</category>
            
          
            
              <category>Unity</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>
