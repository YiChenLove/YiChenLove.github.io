// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        s_offset: { value:  [-0.02, -0.02] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;

  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1.0);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <cc-global.chunk>
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  

  uniform shadowset {
    vec2 s_offset;
  };

  vec4 composite(vec4 over, vec4 under)
  {
    return over + (1.0 - over.a)*under;
  }
  
  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    // ALPHA_TEST(o);

    //shadow 
    vec2 shadowOffset = s_offset;
  
    float shadowMask = texture2D(texture, v_uv0 + shadowOffset).a;
    float shadowOpacity = 0.5 * cc_time.x;
    vec4 shadowColor = vec4(0, 0, 0 , shadowMask * shadowOpacity);

    gl_FragColor = composite(o, shadowColor);
  }
}%
