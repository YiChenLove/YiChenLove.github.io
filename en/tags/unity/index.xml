<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity on wangyichen&#39;s blog</title>
    <link>http://localhost:1313/en/tags/unity/</link>
    <description>Recent content in Unity on wangyichen&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Mon, 20 Mar 2023 17:06:20 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/en/tags/unity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unity Shader入门（三）</title>
      <link>http://localhost:1313/en/posts/unity-shader3/</link>
      <pubDate>Mon, 20 Mar 2023 17:06:20 +0800</pubDate>
      <guid>http://localhost:1313/en/posts/unity-shader3/</guid>
      <description>&lt;h2 id=&#34;1npr基础概念&#34;&gt;1.NPR基础概念&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;NPR&lt;/strong&gt; 是  Non-Photorealistic Rendering 的简称，也就是图形渲染中的非真实感渲染，常见的 NPR 渲染包括卡通渲染、油画渲染、像素感渲染、素描画、水墨画等类型。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;卡通渲染&lt;/strong&gt; 是非真实感渲染中应用最广的渲染技术，在游戏和影视领域都是非常常见的。它主要是通过简化并剔除画面原本所包含的混杂部分，给人以独特的感染力和童趣，通常来说卡通渲染有4个要素 轮廓描边、色阶、高光、边缘光。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unity Shader入门（二）</title>
      <link>http://localhost:1313/en/posts/unity-shader2/</link>
      <pubDate>Sun, 29 Jan 2023 15:18:50 +0800</pubDate>
      <guid>http://localhost:1313/en/posts/unity-shader2/</guid>
      <description>&lt;h2 id=&#34;1渲染管线的相关概念&#34;&gt;1.渲染管线的相关概念&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/YiChenLove/ImageHostingService/blogImg/5bb6dfaf-1c3f-4be4-b61e-7d70640d525a.jpg&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;渲染管线是实时渲染的核心组件。渲染管线的功能是通过给定虚拟相机、3D场景物体以及光源等场景要素来产生或者渲染一副2D的图像。如上图所示，场景中的3D物体通过管线转变为屏幕上的2D图像。渲染管线是实时渲染的重要工具，实时渲染离不开渲染管线。图形渲染管线主要包括两个功能：一是将物体3D坐标转变为屏幕空间2D坐标，二是为屏幕每个像素点进行着色。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unity Shader入门（一）</title>
      <link>http://localhost:1313/en/posts/unity-shader1/</link>
      <pubDate>Sat, 28 Jan 2023 15:51:16 +0800</pubDate>
      <guid>http://localhost:1313/en/posts/unity-shader1/</guid>
      <description>&lt;h2 id=&#34;1-untiy-图形相关概念以及基础知识&#34;&gt;1. Untiy 图形相关概念以及基础知识&lt;/h2&gt;&#xA;&lt;h3 id=&#34;mesh--meshfilter--meshrenderer--material-相关概念以及基础知识&#34;&gt;Mesh / MeshFilter / MeshRenderer / Material 相关概念以及基础知识&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/YiChenLove/ImageHostingService/blogImg/20230128160757.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在Unity 3D物体中包含了MeshFilter， MeshRenderer，Material组件，然后MeshFilter中包含了Mesh。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vector3类详解</title>
      <link>http://localhost:1313/en/posts/unity-vector3-class/</link>
      <pubDate>Tue, 05 Jul 2022 14:52:12 +0800</pubDate>
      <guid>http://localhost:1313/en/posts/unity-vector3-class/</guid>
      <description>&lt;h4 id=&#34;一向量点乘叉乘的介绍&#34;&gt;一、向量、点乘、叉乘的介绍&lt;/h4&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在数学中，几何向量（也称为欧几里得向量，通常简称向量、矢量），指具有大小（magnitude）和方向的量。  向量可以形象化地表示为带箭头的线段。箭头所指：代表向量的方向；线段长度：代表向量的大小。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unity Canvas 的三种渲染模式</title>
      <link>http://localhost:1313/en/posts/unity-canvas-render-mode/</link>
      <pubDate>Mon, 27 Jun 2022 11:11:26 +0800</pubDate>
      <guid>http://localhost:1313/en/posts/unity-canvas-render-mode/</guid>
      <description>&lt;h1 id=&#34;canvas的三种渲染模式&#34;&gt;Canvas的三种渲染模式&lt;/h1&gt;&#xA;&lt;p&gt;Canvas共有三种渲染模式，分别是ScreenSpace-Overlay、ScreenSpace-Camera和WorldSpace。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-screen-space-overlay模式&#34;&gt;1 Screen Space-Overlay模式&lt;/h2&gt;&#xA;&lt;p&gt;Screen Space-Overlay（屏幕空间-覆盖模式）UI元素的位置坐标是屏幕空间的坐标，Overlay模式下画布会填满整个屏幕空间，并将画布下面的所有的UI元素置于屏幕的最上层。如果屏幕尺寸被改变，画布将自动改变尺寸来匹配屏幕。&lt;br /&gt;&#xA;此时，画布上的UI组件会随视角移动。&lt;br /&gt;&#xA;Screen Space-Overlay模式的画布有Pixel Perfect和Sort Layer两个参数：&lt;/p&gt;</description>
    </item>
    <item>
      <title>UnityEngine.Vector3 - Unity 脚本 API</title>
      <link>http://localhost:1313/en/posts/unity-vector3/</link>
      <pubDate>Mon, 20 Jun 2022 21:14:13 +0800</pubDate>
      <guid>http://localhost:1313/en/posts/unity-vector3/</guid>
      <description>&lt;h2 id=&#34;vector3&#34;&gt;Vector3&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;struct in UnityEngine&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;切换到手册&lt;/p&gt;&#xA;&lt;h3 id=&#34;描述&#34;&gt;描述&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;用于表示 3D 向量和点。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Unity 内部使用该结构传递 3D 位置和方向。 此外，它还包含用于执行常见向量操作的函数。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;除了下面列出的函数以外，也可以使用其他类操作向量和点。 例如，对于旋转或变换向量和点来说，Quaternion 和 Matrix4x4 类也很有用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>简单了解Mono和IL2CPP</title>
      <link>http://localhost:1313/en/posts/monoandil2cpp/</link>
      <pubDate>Mon, 13 Dec 2021 21:31:47 +0800</pubDate>
      <guid>http://localhost:1313/en/posts/monoandil2cpp/</guid>
      <description>&lt;p&gt;目录&lt;/p&gt;&#xA;&lt;p&gt;.NET 应用程序是怎么运行的？ 跨平台需求 CIL，公共中间语言（Common Intermediate Language） CLR，公共语言运行时（Common Language Runtime） C# 的执行过程 .Net Framework 和 Mono Mono Mono 的组成 Mono 的执行流程 Mono 的优点 Mono 的缺点 IL2CPP IL2CPP 的组成 IL2CPP 的执行流程 IL2CPP 的优点 IL2CPP 的缺点 可能产生的疑问 参考文章&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unity 内存优化</title>
      <link>http://localhost:1313/en/posts/unity-cpu/</link>
      <pubDate>Thu, 09 Dec 2021 20:32:12 +0800</pubDate>
      <guid>http://localhost:1313/en/posts/unity-cpu/</guid>
      <description>&lt;h3 id=&#34;heading&#34;&gt;&lt;/h3&gt;&#xA;&lt;p&gt;性能分析&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;优化工作的第一个步骤便是通过性能分析来收集性能数据，这也是移动端优化的第一步。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;我们要尽早在目标设备上进行性能分析而且要经常分析&#34;&gt;&lt;code&gt;我们要尽早在目标设备上进行性能分析，而且要经常分析。&lt;/code&gt;&lt;/h4&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Unity Profiler可提供应用关键的性能信息，因此是优化必不可少的一部分。尽早对项目进行性能分析，不要拖到发售前。对每一个故障或性能尖峰彻查到底。对你自己的项目性能有一个清晰的认知，可帮助你更轻松地发现新问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unity SRP URP HDRP 的区别</title>
      <link>http://localhost:1313/en/posts/unity-urp-hdrp/</link>
      <pubDate>Fri, 03 Dec 2021 19:24:46 +0800</pubDate>
      <guid>http://localhost:1313/en/posts/unity-urp-hdrp/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/en/posts/unity-urp-hdrp/media/image1.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1.&lt;code&gt;Build-In Render&lt;/code&gt; 内置渲染器（默认）兼容太多，反而不能面面俱到，效果不好&lt;/p&gt;&#xA;&lt;p&gt;2.&lt;code&gt;Scriptable Render Pipline&lt;/code&gt; 可编程渲染管线技术，是Unity提供的新渲染系统，可用C#脚本定制Unity的渲染过程，但自己定制渲染管线对编程要求很高，难度大，所以Unity提供里2个预制的管线，基本上涵盖了我们所有的需求，使用时不需要太底层的技术要求！&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unity的DraCall和Batch</title>
      <link>http://localhost:1313/en/posts/unity-drawcall-batch/</link>
      <pubDate>Wed, 01 Dec 2021 20:33:28 +0800</pubDate>
      <guid>http://localhost:1313/en/posts/unity-drawcall-batch/</guid>
      <description>&lt;h2 id=&#34;制作性能更高的ui&#34;&gt;制作性能更高的UI&lt;/h2&gt;&#xA;&lt;h3 id=&#34;drawcall和batch&#34;&gt;DrawCall和Batch&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;抛去他复杂的定义，从字面意思上来理解，DrawCall,就是CPU准备好了数据呼叫GPU去绘制。假设场景中有两个按钮，他们使用了两张不同的图，那么每一帧就会存在2个DrawCall来分别绘制这两个按钮。但是，如果这两个按钮使用的是同一个贴图，而且使用了同一个材质，那么每一帧就只会有一个DrawCall，DrawCall的数量越低，表示性能越好。&lt;br /&gt;&#xA;Batch可以理解为DrawCall的另一种称呼，每一次DrawCall都会产生一个Batch，里面存放这需要绘制的顶点信息，Batch由CPU送往GPU进行绘制。所以Drawcall越多，Batch的数量越多，CPU的负担会越大。NVIDIA 在 GDC 曾经提出，25K batchs/sec 会消耗掉 1GHz 的 CPU，100% 的使用率。&lt;br /&gt;&#xA;所以制作性能更好的UI，最基本的思路，就是尽量使用同一个材质，将单独的图片制作成图集，在Unity里进行slice之后再使用。&lt;/p&gt;</description>
    </item>
    <item>
      <title> XLua框架——lua协程实现</title>
      <link>http://localhost:1313/en/posts/xluacoroutine/</link>
      <pubDate>Tue, 09 Nov 2021 15:47:27 +0800</pubDate>
      <guid>http://localhost:1313/en/posts/xluacoroutine/</guid>
      <description>&lt;p&gt;协程在unity中是一个很常用的方法，我们可以利用协程使代码看起来更连贯，易于理解。xlua在示例6中提供了一个协程的示例。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;util&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;xlua.util&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gameobject&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CS.UnityEngine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GameObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Coroutine_Runner&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;CS.UnityEngine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object.DontDestroyOnLoad&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gameobject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cs_coroutine_runner&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gameobject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AddComponent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;typeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CS.Coroutine_Runner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;async_yield_return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_yield&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cs_coroutine_runner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;YieldAndCallback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_yield&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;yield_return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;util.async_to_sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;async_yield_return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;util&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;xlua.util&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;yield_return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;cs_coroutine&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yield_return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;co&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;coroutine.create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;coroutine start!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os.time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;yield_return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CS.UnityEngine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WaitForSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;wait interval:&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os.time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;www&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CS.UnityEngine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WWW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http://www.qq.com&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;yield_return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;www&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;www.error&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;www.bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;error:&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;www.error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;co&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;利用这个示例我们可以实现协程的一些功能，比如服务器列表获取，资源下载等。但是，随着项目的推进，我们发现，这个协程和我们在unity中使用的协程是不一样的，我们无法中断它。相信很多人都遇到了这个问题，为了解决这个问题，我们需要换一种思路来实现。&lt;br /&gt;&#xA;在前面的设计中，我们将c#端的LuaBehaviour注入到了lua端，这以为着我们可以直接利用这个注入变量调用c#端的StartCoroutine函数，能调用到这个函数，问题就直接解决了。&lt;br /&gt;&#xA;但是，进阶这会发现好像并不能运行，这是因为Lua端的函数仅仅是个普通函数，而协程StartCoroutine要求的函数是要IEnumerator，这意味着我们需要构造出一个IEnumerator来，在官方文档《hotfix.md》里，有一节是“Unity协程”&lt;/p&gt;</description>
    </item>
    <item>
      <title>【unity】使用Profiler进行性能分析</title>
      <link>http://localhost:1313/en/posts/unity-profiler/</link>
      <pubDate>Mon, 08 Nov 2021 10:45:06 +0800</pubDate>
      <guid>http://localhost:1313/en/posts/unity-profiler/</guid>
      <description>&lt;p&gt;在游戏开发过程中，游戏性能是非常重要的，学会使用unity自带的profiler工具是非常必要的，以下是我从官方地址找到的进阶教程，感觉文章非常详细，于是尝试翻译。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unity中xLua与toLua对Vector3的优化</title>
      <link>http://localhost:1313/en/posts/unity-xlua-vector3/</link>
      <pubDate>Fri, 05 Nov 2021 17:55:54 +0800</pubDate>
      <guid>http://localhost:1313/en/posts/unity-xlua-vector3/</guid>
      <description>&lt;h3 id=&#34;目录&#34;&gt;目录&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;概述&lt;br /&gt;&#xA;1.1 Vector3的定义&lt;br /&gt;&#xA;1.2 主要优化的是什么？&lt;/li&gt;&#xA;&lt;li&gt;xLua对Vector3的优化&lt;br /&gt;&#xA;2.1 xLua创建Vector3&lt;br /&gt;&#xA;2.2 xLua获取Vector3 &amp;ndash; C#的Vector3传入lua&lt;br /&gt;&#xA;2.3 xLua 设置 Vector3到C#&lt;br /&gt;&#xA;2.4 GCOptimize &amp;ndash; &lt;code&gt;PushUnityEngineVector3&lt;/code&gt;的由来&lt;/li&gt;&#xA;&lt;li&gt;toLua对Vector3的优化&lt;br /&gt;&#xA;3.1 toLua创建Vector3&lt;br /&gt;&#xA;3.2 toLua获取Vector3 &amp;ndash; C#的Vector3传入lua&lt;br /&gt;&#xA;3.3 toLua 设置 Vector3到C#&lt;/li&gt;&#xA;&lt;li&gt;xLua与toLua对Vector3的优化的区别&lt;br /&gt;&#xA;4.1 效率性能的比较&lt;br /&gt;&#xA;4.2 扩展性的比较&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;一-概述&#34;&gt;一. 概述&lt;/h3&gt;&#xA;&lt;h5 id=&#34;11-vector3的定义&#34;&gt;1.1 Vector3的定义&lt;/h5&gt;&#xA;&lt;p&gt;&lt;code&gt;public struct Vector3&lt;/code&gt;，是一个struct 结构体，值类型。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Litjson Fix</title>
      <link>http://localhost:1313/en/posts/litjson-fix/</link>
      <pubDate>Fri, 05 Nov 2021 17:25:44 +0800</pubDate>
      <guid>http://localhost:1313/en/posts/litjson-fix/</guid>
      <description>&lt;h3 id=&#34;litjson解析json字符串空出错&#34;&gt;LitJson解析JSON字符串空{}出错&lt;/h3&gt;&#xA;&lt;p&gt;问题&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsstr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;{\&amp;#34;key1\&amp;#34;:\&amp;#34;value1\&amp;#34;,\&amp;#34;key2\&amp;#34;:{},\&amp;#34;key3\&amp;#34;:\&amp;#34;value3\&amp;#34;}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;JsonData&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsdata&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JsonMapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JsonData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsstr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outstr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JsonMapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToJson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsddata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;litjson json string:&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outstr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//输出litjson json string:{key1:value1,key2,key3:value3&amp;#34;}已不是一个正常的json字符串。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;解决&lt;br /&gt;&#xA;在&lt;code&gt;JsonData.class&lt;/code&gt;的&lt;code&gt;WriteJson&lt;/code&gt;方法最后添加一句&lt;code&gt;writer.Write(null);&lt;/code&gt;即可解决。此方法也适用于解决空数组[]解析问题。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
